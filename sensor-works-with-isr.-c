#include <stdio.h>
#include "common.h"
#include "sensor.h"
#include "powermgmt.h"
#include "common.h"
#include "timers.h"
#include "event_groups.h"
#include "global.h"

#include "LPC177x_8x.h"

#define BIT_ADC_DONE    ( 1 << 0 )
#define BIT_DIG_INT    ( 1 << 1 )

EventGroupHandle_t xSensorEventGroup;
xQueueHandle xDIGMsgQueue;
TimerHandle_t xADCTriggerTimer;



const uint16_t tempCalTbl[110] = {
    0xCF3, 0xCD6, 0xCB9, 0xC9B, 0xC7C, 0xC5A, 0xC3B, 0xC1B, 0xBFB, 0xBDB,
    0xBB5, 0xB93, 0xB72, 0xB50, 0xB2E, 0xB01, 0xADE, 0xABA, 0xA97, 0xA73,
    0xA46, 0xA23, 0x9FF, 0x9DB, 0x9B7, 0x984, 0x960, 0x93B, 0x917, 0x8F3,
    0x8C1, 0x89E, 0x87A, 0x857, 0x834, 0x800, 0x7DD, 0x7BA, 0x798, 0x776,
    0x743, 0x722, 0x701, 0x6E0, 0x6C0, 0x68E, 0x66F, 0x651, 0x633, 0x616,
    0x5E4, 0x5C7, 0x5AB, 0x590, 0x575, 0x545, 0x52B, 0x511, 0x4F8, 0x4DF,
    0x4B3, 0x49B, 0x484, 0x46E, 0x457, 0x42E, 0x419, 0x404, 0x3F0, 0x3DC,
    0x3B6, 0x3A3, 0x391, 0x37F, 0x36D, 0x34A, 0x339, 0x329, 0x319, 0x30A,
    0x2EA, 0x2DC, 0x2CD, 0x2C0, 0x2B2, 0x295, 0x288, 0x27C, 0x270, 0x264,
    0x249, 0x23E, 0x234, 0x229, 0x21F, 0x207, 0x1FD, 0x1F3, 0x1EA, 0x1E1,
    0x1CC, 0x1C4, 0x1BB, 0x1B3, 0x1AB, 0x198, 0x191, 0x18A, 0x183, 0x17C,
};

int32_t convertAcc(uint16_t adc);
void printAcc(int32_t acc);

static volatile uint8_t ADC_Interrupt_Done_Flag;

#define ADC_DR_DONE(n)          (((n) >> 31))
#define ADC_DR_RESULT(n)        ((((n) >> 4) & 0xFFF))
#define channel                 (7)

void ADC_IRQHandler(void) {

    //portENTER_CRITICAL();
    NVIC_DisableIRQ(ADC_IRQn);
    //portEXIT_CRITICAL();
    LPC_ADC->INTEN &= ~((1 << ADC_Channel)); // channel

    ADC_Interrupt_Done_Flag = 1;
}


void task_Sensor(void *pvParameters) {
    
    uint32_t cr = 0;
    uint32_t fullAdcRate;
    uint8_t div;
    // #if defined(ADC_ACC_12BITS)
    fullAdcRate = 400000 * 31;
    div = ((PeripheralClock * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;

#define ADC_CR_CLKDIV(n)        ((((n) & 0xFF) << 8))
#define ADC_CR_EDGE             ((1UL << 27))

    LPC_SC->PCONP |= PCONP_PCADC;               // power up ADC
    //LPC_ADC->ADTRM = 0xF00;
    //ADC7 = ADC_CR_CLKDIV(div);
    //ADC6 = div;
    LPC_ADC->INTEN = 0;		/* Disable all interrupts */
 
    
    cr |= (1UL << 21);
    
    cr |= ((2 * 16) << 8); //clockdiv 8+9 stops, (burst 10 stops)
    //cr |= ADC_CR_CLKDIV(div);
    LPC_ADC->CR = cr;
    LPC_IOCON->P0_12 = 0;
    /*LPC_IOCON->P0_13 = 0;
    LPC_IOCON->P0_23 = 0;
    LPC_IOCON->P0_24 = 0;
    LPC_IOCON->P0_25 = 0;
    LPC_IOCON->P0_26 = 0;
    LPC_IOCON->P1_30 = 0;
    LPC_IOCON->P1_31 = 0;*/

    LPC_IOCON->P0_12 = (1 << 8) | (3 << 0);
    LPC_IOCON->P0_13 = (1 << 8) | (3 << 0);
    LPC_IOCON->P0_23 = (1 << 8) | (1 << 0);
    LPC_IOCON->P0_24 = (1 << 8) | (1 << 0);
    LPC_IOCON->P0_25 = (1 << 8) | (1 << 0);
    LPC_IOCON->P0_26 = (1 << 8) | (1 << 0);
    LPC_IOCON->P1_30 = (1 << 8) | (3 << 0);
    LPC_IOCON->P1_31 = (1 << 8) | (3 << 0);

    LPC_ADC->CR |= (1 << ADC_Channel); // Channel
    
    //TESTADC2=LPC_ADC->CR;

    portENTER_CRITICAL();
    NVIC_SetPriority(ADC_IRQn, 5);
    NVIC_EnableIRQ(ADC_IRQn);
    portEXIT_CRITICAL();
    LPC_ADC->INTEN |= (1 << ADC_Channel); // channel
    //LPC_ADC->CR |= ( 1 << 16); // Burst
    LPC_ADC->CR |= (1 << 24); // STARTNOW
    TESTADC3=LPC_ADC->CR;
    for (;;) {
        vTaskDelay(xDelay100);
        
        if ( ADC_Interrupt_Done_Flag ) {
            TESTADC1++;

            uint32_t ADCDR;
            ADCDR = LPC_ADC->DR[ADC_Channel];

            if (ADC_DR_DONE(ADCDR)) { 
                ADC[ADC_Channel] = (uint16_t) ADC_DR_RESULT(ADCDR);
                TESTADC2++;
            }
            LPC_ADC->CR &= ~((1 << ADC_Channel));
        
            ADC_Channel++;
            if (ADC_Channel == 7) ADC_Channel = 0;
            
            LPC_ADC->CR |= (1 << ADC_Channel); // Channel
            
            
            NVIC_EnableIRQ(ADC_IRQn);
            LPC_ADC->INTEN |= (1 << ADC_Channel); // channel
            
            ADC_Interrupt_Done_Flag = 0;

        }
    }
}
